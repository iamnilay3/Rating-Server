/*
 * Copyright 2012 "TiriliPiitPiit" ( tirili_@fastmail.fm , http://github.com/TiriliPiitPiit )
 * 
 * This file is part of Tirili's Rating Server, which is free software. It is made
 * available to you under the terms of the GNU General Public License
 * as published by the Free Software Foundation. For more information,
 * see COPYING.
 */



Tirili's Rating Server is a simple rating server written by Tirili with network code snippets from http://beej.us/guide/bgnet/ .
It can be used for several games/disciplines with zero or negligible adaption required. Examples: Chessgames, OpenRA.



COMPILE:

Just use g++ or another c++ compiler and compile the source code accordingly:

g++ RatingServer.cpp Network.cpp Games.cpp -o RatingServer



START:

Just run the resulting binary file like this:

./RatingServer FileToLoadFrom FileToSaveTo ListeningPortNr



USAGE:

To find out your global ip-address use a service like http://www.whatismyip.com .
Remember that the server port you specify must be accessible. You might have to setup some port-forwarding and firewall rules.



DOCUMENTATION:

The rating server holds a list of accounts with each some nicknames and at least one rating system value and some more attributes related.
The account list can be loaded from and saved to files. Sorted rating lists can be printed.
For each game that is supposed to be evaluated a game server and participating game clients are required.
The following communicatio protocol is used:
	
	
	Let RS be the rating server, GS be the game server and CL1, ... , CLn be the game clients of which CL be a distinguished one.
	
	
	To register a new account a client CL must connect to the listening port of the GS via tcp and send a byte sequence of the following
	constitution:
		
		sequence-length:command-id:data-subsequence,
		
		where sequence-length is the length in bytes of rest of the sequence being sent (at most '100') represented by 3 chars,
		command-id is the two chars {'0', '1'} (this number 01 is reserved for the registration-command) and
		data-subsequence is the concatenation of a null-terminated char sequence representing the first nickname of the account
		 and a null-terminated char sequence representing the account password.
		
		Example:	{'0', '1', '5', '0', '1', 'J', 'o', 'e', '\0', 'g', 'R', 'e', 'E', 'n', '9', '9', '!', '\0'}
		
				Notice that the "rest of the sequence" is 15 here, the command-id is 01, the nickname is Joe
				and the password is "gReEn99!" .
		
	The GS then returns the char sequence {'0', '0', '3', '0', '2', 's'} at success or {'0', '0', '3', '0', '2', 'f'} at failure.
	
	
	All other commands which are sent between RS and GS or RS and CL obey the same constitution sequence-length:command-id:data-subsequence.
	
	
	EXPLANATION OF THE REST OF THE COMMANDS GOES HERE